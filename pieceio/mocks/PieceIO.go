// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import cid "github.com/ipfs/go-cid"
import io "io"
import ipld "github.com/ipld/go-ipld-prime"
import mock "github.com/stretchr/testify/mock"
import pieceio "github.com/filecoin-project/go-fil-components/pieceio"

// PieceIO is an autogenerated mock type for the PieceIO type
type PieceIO struct {
	mock.Mock
}

// GeneratePieceCommitment provides a mock function with given fields: bs, payloadCid, selector
func (_m *PieceIO) GeneratePieceCommitment(bs pieceio.ReadStore, payloadCid cid.Cid, selector ipld.Node) ([]byte, error) {
	ret := _m.Called(bs, payloadCid, selector)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(pieceio.ReadStore, cid.Cid, ipld.Node) []byte); ok {
		r0 = rf(bs, payloadCid, selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pieceio.ReadStore, cid.Cid, ipld.Node) error); ok {
		r1 = rf(bs, payloadCid, selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadPiece provides a mock function with given fields: r, bs
func (_m *PieceIO) ReadPiece(r io.Reader, bs pieceio.WriteStore) (cid.Cid, error) {
	ret := _m.Called(r, bs)

	var r0 cid.Cid
	if rf, ok := ret.Get(0).(func(io.Reader, pieceio.WriteStore) cid.Cid); ok {
		r0 = rf(r, bs)
	} else {
		r0 = ret.Get(0).(cid.Cid)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader, pieceio.WriteStore) error); ok {
		r1 = rf(r, bs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WritePayload provides a mock function with given fields: bs, payloadCid, selector, w
func (_m *PieceIO) WritePayload(bs pieceio.ReadStore, payloadCid cid.Cid, selector ipld.Node, w io.Writer) ([]byte, error) {
	ret := _m.Called(bs, payloadCid, selector, w)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(pieceio.ReadStore, cid.Cid, ipld.Node, io.Writer) []byte); ok {
		r0 = rf(bs, payloadCid, selector, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pieceio.ReadStore, cid.Cid, ipld.Node, io.Writer) error); ok {
		r1 = rf(bs, payloadCid, selector, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
